#!/bin/bash -eu

echo "--- :swift: Running SwiftLint"

SWIFTLINT_ARGUMENTS=(--quiet --reporter relative-path)

while [[ "$#" -gt 0 ]]; do
  case $1 in
    --strict | --lenient)
      SWIFTLINT_ARGUMENTS+=("$1")
      shift
      ;;
    *) break ;;
  esac
done

if [[ $# -gt 0 ]]; then
  echo "Error: invalid arguments."
  echo "Usage: $0 [--strict | --lenient]"
  exit 1
fi

SWIFTLINT_VERSION="$(<.swiftlint.yml awk '/^swiftlint_version: / {print $2}')"
SWIFTLINT_DOCKER_CMD=(docker run --rm -v "$PWD":/workspace -w /workspace ghcr.io/realm/swiftlint:"$SWIFTLINT_VERSION" swiftlint)

set +e
SWIFTLINT_OUTPUT=$("${SWIFTLINT_DOCKER_CMD[@]}" lint "${SWIFTLINT_ARGUMENTS[@]}")
SWIFTLINT_EXIT_STATUS=$?
set -e

WARNINGS=$(echo -e "$SWIFTLINT_OUTPUT" | awk -F': ' '/: warning:/ {printf "- `%s`: %s\n", $1, $4}')
ERRORS=$(echo -e "$SWIFTLINT_OUTPUT" | awk -F': ' '/: error:/ {printf "- `%s`: %s\n", $1, $4}')

if [ -n "$WARNINGS" ]; then
  echo "$WARNINGS"
  printf "**SwiftLint Warnings**\n%b" "$WARNINGS" | buildkite-agent annotate --style 'warning'
fi

if [ -n "$ERRORS" ]; then
  echo "$ERRORS"
  printf "**SwiftLint Errors**\n%b" "$ERRORS" | buildkite-agent annotate --style 'error'
fi

exit $SWIFTLINT_EXIT_STATUS
