#!/bin/bash -eu

print_usage() {
  echo "Usage:"
  echo "  Using the \`Package.resolved\` of an Xcode \`.xworkspace\`:"
  echo "    ${0##*/} --workspace PATH"
  echo "  Using the \`Package.resolved\` of an Xcode \`.xcodeproj\`:"
  echo "    ${0##*/} --project PATH"
  echo "  Using the \`Package.resolved\` at the root, managed by \`swift package\` instead of Xcode:"
  echo "    ${0##*/} --use-spm"
}

# Parse input parameters
XCWORKSPACE_PATH=
XCODEPROJ_PATH=
USE_SPM=false

case ${1:-} in
  --workspace)
    XCWORKSPACE_PATH="${2:?you need to provide a value after the --workspace option}"
    shift; shift
    ;;
  --project)
    XCODEPROJ_PATH=${2:?you need to provide a value after the --project option}
    shift; shift
    ;;
  --use-spm)
    USE_SPM=true
    shift
    ;;
  -h|--help)
    print_usage
    exit 0
    ;;
esac

if [[ "$#" -gt 0 ]]; then
  echo "Unexpected extra arguments: $*" >&2
  print_usage
  exit 2
fi

SPM_CACHE_LOCATION="${HOME}/Library/Caches/org.swift.swiftpm"

# Try to guess what to do if no option provided explicitly
if [[ -z "${XCWORKSPACE_PATH}" && -z "${XCODEPROJ_PATH}" && "${USE_SPM}" != "true" ]]; then
  echo "No \`--workspace\`, \`--project\` or \`--use-spm\` flag provided. Trying to guess the correct one to use..."

  shopt -s nullglob
  FOUND_ROOT_WORKSPACE_PATHS=(*.xcworkspace)
  FOUND_ROOT_PROJECT_PATHS=(*.xcodeproj)

  if [[ ${#FOUND_ROOT_WORKSPACE_PATHS[@]} -eq 1 && -d "${FOUND_ROOT_WORKSPACE_PATHS[0]}" && ! -f "Package.swift" ]]; then
    XCWORKSPACE_PATH="${FOUND_ROOT_WORKSPACE_PATHS[0]}"
    echo " --> Found a single \`.xcworkspace\` file, and no \`Package.swift\` in the root of the repo."
    echo "     Defaulting to \`--workspace \"${XCWORKSPACE_PATH}\"\`."
  elif [[ ${#FOUND_ROOT_WORKSPACE_PATHS[@]} -eq 0 && ${#FOUND_ROOT_PROJECT_PATHS[@] } -eq 1 && ! -f "Package.swift" ]]; then
    XCODEPROJ_PATH="${FOUND_ROOT_PROJECT_PATHS[0]}"
    echo " --> Found an \`.xcodeproj\`, and no \`Package.swift\` nor \`.xcworkspace\`in the root of the repo."
    echo "     Defaulting to \`--project \"${XCODEPROJ_PATH}\`"
  elif [[ ${#FOUND_ROOT_WORKSPACE_PATHS[@]} -eq 0 && ${#FOUND_ROOT_PROJECT_PATHS[@] } -eq 0 && -f "Package.swift" ]]; then
    echo " --> Found a \`Package.swift\`, and no \`.xcworkspace\` or \`.xcodeproj\` in the root of the repo."
    echo "     Defaulting to \`--use-spm\`"
    USE_SPM=true
  else
    echo " -!- No valid --workspace, --project or --use-spm flag provided, and cannot guess which one to use either, so aborting."
    echo "     Please call $0 with an explicit \`--workspace PATH\`, \`--project PATH\` or \`--use-spm\` flag to disambiguate."
    exit 1
  fi
fi

# Find where Package.resolved is located so we can compute the cache key from its hash
PACKAGE_RESOLVED_LOCATION=
if [[ -n "${XCWORKSPACE_PATH}" ]]; then
  PACKAGE_RESOLVED_LOCATION="${XCWORKSPACE_PATH%/}/xcshareddata/swiftpm/Package.resolved"
elif [[ -n "${XCODEPROJ_PATH}" ]]; then
  PACKAGE_RESOLVED_LOCATION="${XCODEPROJ_PATH%/}/project.xcworkspace/xcshareddata/swiftpm/Package.resolved"
elif [[ "${USE_SPM}" == "true" ]]; then
  PACKAGE_RESOLVED_LOCATION="Package.resolved"
fi

if [[ ! -f "${PACKAGE_RESOLVED_LOCATION}" ]]; then
  echo "Unable to find \`Package.resolved\` file (${PACKAGE_RESOLVED_LOCATION:-unable to guess path})"
  exit 1
fi

# Restore SPM cache if it's available
echo "~~~ Restoring SPM cache if available"
PACKAGE_RESOLVED_HASH=$(hash_file "${PACKAGE_RESOLVED_LOCATION}")
CACHE_KEY="${BUILDKITE_PIPELINE_SLUG}-spm-cache-${PACKAGE_RESOLVED_HASH}"

mkdir -p "${SPM_CACHE_LOCATION}"
cd "${SPM_CACHE_LOCATION}"
restore_cache "${CACHE_KEY}"
cd -

# This will let Xcode use the system SSH config for downloading packages
sudo defaults write com.apple.dt.Xcode IDEPackageSupportUseBuiltinSCM YES

# Trust all GitHub.com and BitBucket.org keys â€“ this allows checking out dependencies via SSH
add_host_to_ssh_known_hosts bitbucket.org
add_host_to_ssh_known_hosts github.com

# Resolve the packages using the correct method
if [[ -d "${XCWORKSPACE_PATH}" ]]; then
  echo "~~~ Resolving Swift Packages with \`xcodebuild\`"
  echo "Using -workspace \"${XCWORKSPACE_PATH}\""
  # Note: we use `-list` as a workaround because otherwise `xcodebuild` complains that using `-workspace` requires to also provide the `-scheme` option
  # (despite the help page of `xcodebuild` suggesting that it should work without `-scheme`). Since the dependency resolution doesn't really depend on the scheme
  # and we don't want to have to provide or guess it, using `-list` instead stops making `xcodebuild` complain about `-workspace` not being used in conjunction
  # with `-scheme` (even if in practice we don't care about the scheme list it returns)
  xcodebuild -workspace "${XCWORKSPACE_PATH}" -resolvePackageDependencies -onlyUsePackageVersionsFromResolvedFile -list
elif [[ -d "${XCODEPROJ_PATH}" ]]; then
  echo "~~~ Resolving Swift Packages with \`xcodebuild\`"
  echo "Using -project \"${XCODEPROJ_PATH}\""
  xcodebuild -project "${XCODEPROJ_PATH}" -resolvePackageDependencies -onlyUsePackageVersionsFromResolvedFile
elif [[ "${USE_SPM}" == "true" ]]; then
  echo "~~~ Resolving packages with \`swift package\`"
  swift package resolve
fi

# `checkouts` can be removed because the system can quickly generate them
# instead of needing to download them in the cache each time.
#
# `artifacts` should be removed because it causes issues when downloading
# certain packages to have the artifacts already present after extracting
# cache
echo "~~~ Cleaning up cache files before saving cache"
rm -rf "${SPM_CACHE_LOCATION}/checkouts" "${SPM_CACHE_LOCATION}/artifacts"
echo "Done. Removed checkouts and artifacts subfolders from $SPM_CACHE_LOCATION"

# If this is the first time we've seen this particular cache key, save it for the future
echo "~~~ Saving SPM Cache"
save_cache "${SPM_CACHE_LOCATION}" "${CACHE_KEY}" false --use_relative_path_in_tar
